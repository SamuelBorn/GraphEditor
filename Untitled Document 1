int worldLength = 1;
        boolean finishedSplitting = false;
        while (!finishedSplitting) {
            finishedSplitting = true;
            Set<String> words = getAllWordsOfLengthN(transitionSymbols, worldLength);
            for (String word : words) {
                Set<Set<Vertex>> updatedEquivalencyClasses = new HashSet<>();
                for (Set<Vertex> equivalencyClass : equivalencyClasses) {
                    Set<Vertex> newFinalVertices = new HashSet<>();
                    Set<Vertex> newNonFinalVertices = new HashSet<>();
                    for (Vertex vertex : equivalencyClass) {
                        try {
                            if (isFinalAfterExecution(vertex, word)) {
                                newFinalVertices.add(vertex);
                            } else {
                                newNonFinalVertices.add(vertex);
                            }
                        } catch (IllegalArgumentException e) {
                            System.err.println("The given Graph is not a DEA");
                            e.printStackTrace();
                            JOptionPane.showMessageDialog(gui.frame, "The given Graph is not a DEA");
                            return null;
                        }
                    }
                    if (newFinalVertices.size() > 0 && newNonFinalVertices.size() > 0) finishedSplitting = false;
                    if (newFinalVertices.size() > 0) updatedEquivalencyClasses.add(newFinalVertices);
                    if (newNonFinalVertices.size() > 0) updatedEquivalencyClasses.add(newNonFinalVertices);
                }
                equivalencyClasses = updatedEquivalencyClasses;
            }
            worldLength++;
        }
